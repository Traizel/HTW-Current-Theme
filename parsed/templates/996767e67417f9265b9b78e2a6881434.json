{"layout/empty":"<!DOCTYPE html>\n<html>\n<head>\n    <title>{{ head.title }}</title>\n    {{{ head.meta_tags }}}\n    {{{ head.config }}}\n\n    <link href=\"{{ head.favicon }}\" rel=\"shortcut icon\">\n    {{#block \"head\"}}{{/block}}\n</head>\n<body>\n    {{#block \"page\"}}{{/block}}\n</body>\n</html>\n","pages/order-confirmation":"{{#partial \"head\"}}\r\n{{{ checkout.checkout_head }}}\r\n{{{ stylesheet '/assets/css/optimized-checkout.css' }}}\r\n{{ getFontsCollection }}\r\n\r\n<script type=\"text/javascript\">\r\n    window.language = {{{langJson 'optimized_checkout'}}};\r\n</script>\r\n\r\n{{{head.scripts}}}\r\n\r\n{{/partial}}\r\n\r\n{{#partial \"page\"}}\r\n<header class=\"checkoutHeader optimizedCheckout-header\">\r\n    <div class=\"checkoutHeader-content\">\r\n        <h1 class=\"is-srOnly\">{{lang 'checkout.title'}}</h1>\r\n        <h2 class=\"checkoutHeader-heading\">\r\n            <a class=\"checkoutHeader-link\" href=\"{{urls.home}}\">\r\n                {{#if checkout.header_image}}\r\n                    <img alt=\"{{settings.store_logo.title}}\" class=\"checkoutHeader-logo\" id=\"logoImage\" src=\"{{ checkout.header_image }}\"/>\r\n                {{ else }}\r\n                    <span class=\"header-logo-text\">{{settings.store_logo.title}}</span>\r\n                {{/if}}\r\n            </a>\r\n        </h2>\r\n    </div>\r\n</header>\r\n\r\n{{{ checkout.order_confirmation_content }}}\r\n\r\n{{{ footer.scripts }}}\r\n\r\n{{/partial}}\r\n\r\n{{> layout/empty}}\r\n<!-- Bolt addition -->\r\n<script>\r\n    setInterval(function() {\r\n        var tags = document.getElementsByClassName(\"orderConfirmation-section\");\r\n        for (var i = 0; i < tags.length; i++) {\r\n            var elm = tags[i];\r\n            var txt = elm.innerText || elm.innerHTML;\r\n            if (txt.includes(\"pay by check\") || txt.includes(\"Bolt\")) {\r\n                elm.style.display = 'none';\r\n            }\r\n        }\r\n    }, 200);\r\n</script>\r\n\r\n<script>\r\n    var callbacks = {\r\n        success: function (transaction, callback) {\r\n            // Executes when the Bolt checkout transaction is successful.\r\n            console.log('Transaction: ', transaction);\r\n            // **IMPORTANT** callback() must be executed at the end of the success function\r\n            callback()\r\n        },\r\n        close: function () {\r\n\r\n            const sendToInksoftTester = () => {\r\n                const config = {\r\n                    headers: {\r\n                        \"X-Auth-Client\": '8sliv4t4rurkp0i057rggy1iet37q3p',\r\n                        \"X-Auth-Token\": 'a1hgctnb1aabqsqzwjua1dtgbov3xfp',\r\n                    },\r\n                };\r\n                axios\r\n                    .get(\r\n                        `https://api.bigcommerce.com/stores/et4qthkygq/v2/orders?sort=date_created:desc&limit=4&page=1`,\r\n                        config\r\n                    ).then(function (response) {\r\n                        const orders = response.data;\r\n                        for (const o of orders) {\r\n                            if (o !== []) {\r\n                                const orderID = o.id;\r\n                                axios\r\n                                    .get(`${o.products.url}`, config)\r\n                                    .then(function (response) {\r\n                                        if (o !== []) {\r\n                                            const products = response.data;\r\n                                            for (const p of products) {\r\n                                                const checker = p.sku.slice(0, 7);\r\n                                                if (checker === 'INKSOFT') {\r\n\r\n                                                    async function sendToInksoft() {\r\n\r\n                                                        console.log(\r\n                                                            'Sending an order to Inksoft..');\r\n\r\n                                                        let inksoft = await axios\r\n                                                            .get(\r\n                                                                `https://api.bigcommerce.com/stores/${storeHash}/v2/orders/${orderID}/products`,\r\n                                                                config\r\n                                                            )\r\n\r\n                                                        console.log('Get Products: ', inksoft\r\n                                                            .data);\r\n\r\n                                                        let designsToSend = [];\r\n                                                        let inksoftCart = [];\r\n                                                        let mainToken = inksoft.data[0]\r\n                                                            .product_options[1].value;\r\n                                                        let currentCart = [];\r\n\r\n                                                        for (const i of inksoft.data) {\r\n\r\n                                                            let inksoftToken = i\r\n                                                                .product_options[1].value;\r\n                                                            let inksoftName = i.product_options[\r\n                                                                2].value;\r\n                                                            let quantity = i.quantity;\r\n\r\n                                                            console.log('Token and Name: ',\r\n                                                                inksoftToken, inksoftName);\r\n\r\n                                                            inksoftCart = await axios\r\n                                                                .get(\r\n                                                                    `https://stores.inksoft.com/DS350156262/Api2/GetCartPackage?SessionToken=${inksoftToken}&Format=JSON`, {\r\n                                                                        dataType: 'text',\r\n                                                                        data: '',\r\n                                                                        processData: false,\r\n                                                                        crossDomain: true,\r\n                                                                    }\r\n                                                                )\r\n\r\n                                                            currentCart = inksoftCart.data.Data;\r\n                                                            console.log('Get Cart: ',\r\n                                                                currentCart);\r\n\r\n                                                            let inksoftItems = currentCart.Cart\r\n                                                                .Items;\r\n                                                            let inksoftDesigns = currentCart\r\n                                                                .DesignSummaries;\r\n                                                            let linkedId = 0;\r\n                                                            let foundDesign = {};\r\n\r\n                                                            for (const d of inksoftDesigns) {\r\n                                                                if (d.Name === inksoftName) {\r\n                                                                    linkedId = d.DesignID;\r\n                                                                }\r\n                                                            }\r\n\r\n                                                            if (linkedId === 0) {\r\n                                                                return;\r\n                                                            } else {\r\n                                                                for (const i of inksoftItems) {\r\n                                                                    if (i.DesignId ===\r\n                                                                        linkedId) {\r\n                                                                        foundDesign = i;\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n\r\n                                                            if (foundDesign === {}) {\r\n                                                                return;\r\n                                                            } else {\r\n                                                                foundDesign.Quantity = quantity;\r\n                                                                designsToSend.push(foundDesign);\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        if (designsToSend === []) {\r\n                                                            return;\r\n                                                        } else {\r\n\r\n                                                            console.log('New Designs: ',\r\n                                                                designsToSend);\r\n\r\n                                                            currentCart.Cart.Items =\r\n                                                                designsToSend;\r\n\r\n                                                            currentCart.Cart.ShippingMethod =\r\n                                                                'BrightPearl';\r\n\r\n                                                            currentCart.Cart.GuestEmail = '';\r\n\r\n                                                            console.log('New Cart Items: ',\r\n                                                                currentCart.Cart.Items);\r\n\r\n                                                            let newCart = JSON.stringify(\r\n                                                                currentCart.Cart);\r\n\r\n                                                            let newNewCart = newCart.replace(\r\n                                                                /\"/g, \"'\");\r\n\r\n                                                            let setCartResponse = [];\r\n\r\n                                                            try {\r\n                                                                let axiosUrl =\r\n                                                                    'https://stores.inksoft.com/DS350156262/Api2/SetCart';\r\n\r\n                                                                let data = {\r\n                                                                    data: `Cart=${newNewCart}&Format=JSON&SessionToken=${mainToken}`,\r\n                                                                }\r\n\r\n                                                                let config = {\r\n                                                                    headers: {\r\n                                                                        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                                                                        Accept: \"application/x-www-form-urlencoded\"\r\n                                                                    }\r\n                                                                }\r\n\r\n                                                                setCartResponse = await axios\r\n                                                                    .post(axiosUrl, data,\r\n                                                                        config)\r\n\r\n                                                            } catch (err) {\r\n                                                                console.log(\r\n                                                                    'Error on Set Cart: ',\r\n                                                                    err);\r\n                                                                if (err.response.data\r\n                                                                    .Messages) {\r\n                                                                    console.log(\r\n                                                                        'Set Cart Error Messgae: ',\r\n                                                                        err.response.data\r\n                                                                        .Messages);\r\n                                                                }\r\n                                                            }\r\n\r\n                                                            console.log('SetCart Response: ',\r\n                                                                setCartResponse);\r\n\r\n                                                            try {\r\n                                                                let axiosUrl =\r\n                                                                    'https://stores.inksoft.com/DS350156262/Api2/SaveCartOrder';\r\n\r\n                                                                let data = {\r\n                                                                    data: `ExternalOrderId=${orderID}&SessionToken=${mainToken}&Email=${email}`,\r\n                                                                }\r\n\r\n                                                                let config = {\r\n                                                                    headers: {\r\n                                                                        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                                                                        Accept: \"application/x-www-form-urlencoded\"\r\n                                                                    }\r\n                                                                }\r\n\r\n                                                                await axios.post(axiosUrl, data,\r\n                                                                    config)\r\n\r\n                                                            } catch (err) {\r\n                                                                console.log(\r\n                                                                    'Error on Post Cart: ',\r\n                                                                    err);\r\n                                                            }\r\n\r\n                                                        }\r\n\r\n                                                    }\r\n\r\n                                                    sendToInksoft();\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })\r\n                            }\r\n                        }\r\n                    })\r\n            }\r\n            \r\n            sendToInksoftTester();\r\n            // This function is called when the Bolt checkout modal is closed.\r\n            // This will not be called when create_order endpoint returns a valid URL\r\n            // and authorization is successful\r\n        }\r\n    }\r\n    var setupCallbacks = setInterval(function () {\r\n        if (typeof (BoltCheckout) != 'undefined') {\r\n            clearInterval(setupCallbacks);\r\n            window.BoltCheckout.setClientCustomCallbacks(callbacks)\r\n        }\r\n    }, 100);\r\n</script>\r\n\r\n<script>\r\nvar checker = function(){\r\n    setTimeout(function(){\r\n        var badMessage = document.querySelector(\".orderConfirmation-section p:nth-child(2)\");\r\n        if(badMessage && badMessage.innerHTML.indexOf(\"Your order was sent to us but is currently awaiting payment\") != -1){\r\n            badMessage.remove();\r\n        }\r\n        else{\r\n            checker();\r\n        }\r\n    }, 500);\r\n}\r\nchecker();\r\n</script>\r\n<!-- End Bolt additiion ->\r\n"}
